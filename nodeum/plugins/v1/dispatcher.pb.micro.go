// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodeum/plugins/v1/dispatcher.proto

package pluginsv1

import (
	fmt "fmt"
	_ "github.com/nodeum-io/nodeum-plugins/nodeum/common/v1"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/structpb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DispatcherPluginService service

func NewDispatcherPluginServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DispatcherPluginService service

type DispatcherPluginService interface {
	// Before the task is started, you can change the task and/or the trigger metadata
	OnStartNewTask(ctx context.Context, in *OnStartNewTaskRequest, opts ...client.CallOption) (*OnStartNewTaskResponse, error)
	// Before a request is dispatched, you can change it or discard it
	OnNewRequest(ctx context.Context, in *OnNewRequestRequest, opts ...client.CallOption) (*OnNewRequestResponse, error)
}

type dispatcherPluginService struct {
	c    client.Client
	name string
}

func NewDispatcherPluginService(name string, c client.Client) DispatcherPluginService {
	return &dispatcherPluginService{
		c:    c,
		name: name,
	}
}

func (c *dispatcherPluginService) OnStartNewTask(ctx context.Context, in *OnStartNewTaskRequest, opts ...client.CallOption) (*OnStartNewTaskResponse, error) {
	req := c.c.NewRequest(c.name, "DispatcherPluginService.OnStartNewTask", in)
	out := new(OnStartNewTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherPluginService) OnNewRequest(ctx context.Context, in *OnNewRequestRequest, opts ...client.CallOption) (*OnNewRequestResponse, error) {
	req := c.c.NewRequest(c.name, "DispatcherPluginService.OnNewRequest", in)
	out := new(OnNewRequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DispatcherPluginService service

type DispatcherPluginServiceHandler interface {
	// Before the task is started, you can change the task and/or the trigger metadata
	OnStartNewTask(context.Context, *OnStartNewTaskRequest, *OnStartNewTaskResponse) error
	// Before a request is dispatched, you can change it or discard it
	OnNewRequest(context.Context, *OnNewRequestRequest, *OnNewRequestResponse) error
}

func RegisterDispatcherPluginServiceHandler(s server.Server, hdlr DispatcherPluginServiceHandler, opts ...server.HandlerOption) error {
	type dispatcherPluginService interface {
		OnStartNewTask(ctx context.Context, in *OnStartNewTaskRequest, out *OnStartNewTaskResponse) error
		OnNewRequest(ctx context.Context, in *OnNewRequestRequest, out *OnNewRequestResponse) error
	}
	type DispatcherPluginService struct {
		dispatcherPluginService
	}
	h := &dispatcherPluginServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DispatcherPluginService{h}, opts...))
}

type dispatcherPluginServiceHandler struct {
	DispatcherPluginServiceHandler
}

func (h *dispatcherPluginServiceHandler) OnStartNewTask(ctx context.Context, in *OnStartNewTaskRequest, out *OnStartNewTaskResponse) error {
	return h.DispatcherPluginServiceHandler.OnStartNewTask(ctx, in, out)
}

func (h *dispatcherPluginServiceHandler) OnNewRequest(ctx context.Context, in *OnNewRequestRequest, out *OnNewRequestResponse) error {
	return h.DispatcherPluginServiceHandler.OnNewRequest(ctx, in, out)
}
