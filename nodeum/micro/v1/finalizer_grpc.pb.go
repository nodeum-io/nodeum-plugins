// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: nodeum/micro/v1/finalizer.proto

package microv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FinalizerServiceClient is the client API for FinalizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinalizerServiceClient interface {
	Start(ctx context.Context, in *FinalizerServiceStartRequest, opts ...grpc.CallOption) (*FinalizerServiceStartResponse, error)
}

type finalizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinalizerServiceClient(cc grpc.ClientConnInterface) FinalizerServiceClient {
	return &finalizerServiceClient{cc}
}

func (c *finalizerServiceClient) Start(ctx context.Context, in *FinalizerServiceStartRequest, opts ...grpc.CallOption) (*FinalizerServiceStartResponse, error) {
	out := new(FinalizerServiceStartResponse)
	err := c.cc.Invoke(ctx, "/nodeum.micro.v1.FinalizerService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinalizerServiceServer is the server API for FinalizerService service.
// All implementations must embed UnimplementedFinalizerServiceServer
// for forward compatibility
type FinalizerServiceServer interface {
	Start(context.Context, *FinalizerServiceStartRequest) (*FinalizerServiceStartResponse, error)
	mustEmbedUnimplementedFinalizerServiceServer()
}

// UnimplementedFinalizerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinalizerServiceServer struct {
}

func (UnimplementedFinalizerServiceServer) Start(context.Context, *FinalizerServiceStartRequest) (*FinalizerServiceStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedFinalizerServiceServer) mustEmbedUnimplementedFinalizerServiceServer() {}

// UnsafeFinalizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinalizerServiceServer will
// result in compilation errors.
type UnsafeFinalizerServiceServer interface {
	mustEmbedUnimplementedFinalizerServiceServer()
}

func RegisterFinalizerServiceServer(s grpc.ServiceRegistrar, srv FinalizerServiceServer) {
	s.RegisterService(&FinalizerService_ServiceDesc, srv)
}

func _FinalizerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizerServiceStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalizerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeum.micro.v1.FinalizerService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalizerServiceServer).Start(ctx, req.(*FinalizerServiceStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinalizerService_ServiceDesc is the grpc.ServiceDesc for FinalizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinalizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeum.micro.v1.FinalizerService",
	HandlerType: (*FinalizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _FinalizerService_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeum/micro/v1/finalizer.proto",
}
