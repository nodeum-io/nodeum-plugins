// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodeum/micro/v1/monitoring.proto

package microv1

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MonitoringService service

func NewMonitoringServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MonitoringService.ListServices",
			Path:    []string{"/services"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for MonitoringService service

type MonitoringService interface {
	// ListServices returns all registered services.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...client.CallOption) (*ListServicesResponse, error)
}

type monitoringService struct {
	c    client.Client
	name string
}

func NewMonitoringService(name string, c client.Client) MonitoringService {
	return &monitoringService{
		c:    c,
		name: name,
	}
}

func (c *monitoringService) ListServices(ctx context.Context, in *ListServicesRequest, opts ...client.CallOption) (*ListServicesResponse, error) {
	req := c.c.NewRequest(c.name, "MonitoringService.ListServices", in)
	out := new(ListServicesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MonitoringService service

type MonitoringServiceHandler interface {
	// ListServices returns all registered services.
	ListServices(context.Context, *ListServicesRequest, *ListServicesResponse) error
}

func RegisterMonitoringServiceHandler(s server.Server, hdlr MonitoringServiceHandler, opts ...server.HandlerOption) error {
	type monitoringService interface {
		ListServices(ctx context.Context, in *ListServicesRequest, out *ListServicesResponse) error
	}
	type MonitoringService struct {
		monitoringService
	}
	h := &monitoringServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MonitoringService.ListServices",
		Path:    []string{"/services"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MonitoringService{h}, opts...))
}

type monitoringServiceHandler struct {
	MonitoringServiceHandler
}

func (h *monitoringServiceHandler) ListServices(ctx context.Context, in *ListServicesRequest, out *ListServicesResponse) error {
	return h.MonitoringServiceHandler.ListServices(ctx, in, out)
}
