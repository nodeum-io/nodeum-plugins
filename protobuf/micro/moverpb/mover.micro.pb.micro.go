// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protobuf/mover.micro.proto

package moverpb

import (
	fmt "fmt"
	_ "github.com/nodeum-io/nodeum-plugins/protobuf/types/storagespb"
	_ "github.com/nodeum-io/nodeum-plugins/protobuf/types/taskpb"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Mover service

func NewMoverEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Mover service

type MoverService interface {
	Start(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error)
}

type moverService struct {
	c    client.Client
	name string
}

func NewMoverService(name string, c client.Client) MoverService {
	return &moverService{
		c:    c,
		name: name,
	}
}

func (c *moverService) Start(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error) {
	req := c.c.NewRequest(c.name, "Mover.Start", in)
	out := new(StartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mover service

type MoverHandler interface {
	Start(context.Context, *StartRequest, *StartResponse) error
}

func RegisterMoverHandler(s server.Server, hdlr MoverHandler, opts ...server.HandlerOption) error {
	type mover interface {
		Start(ctx context.Context, in *StartRequest, out *StartResponse) error
	}
	type Mover struct {
		mover
	}
	h := &moverHandler{hdlr}
	return s.Handle(s.NewHandler(&Mover{h}, opts...))
}

type moverHandler struct {
	MoverHandler
}

func (h *moverHandler) Start(ctx context.Context, in *StartRequest, out *StartResponse) error {
	return h.MoverHandler.Start(ctx, in, out)
}
