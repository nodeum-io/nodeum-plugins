// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: protobuf/dispatcher.plugin.proto

package dispatcherpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherPluginClient is the client API for DispatcherPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherPluginClient interface {
	BeforeStart(ctx context.Context, in *BeforeStartRequestResponse, opts ...grpc.CallOption) (*BeforeStartRequestResponse, error)
}

type dispatcherPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherPluginClient(cc grpc.ClientConnInterface) DispatcherPluginClient {
	return &dispatcherPluginClient{cc}
}

func (c *dispatcherPluginClient) BeforeStart(ctx context.Context, in *BeforeStartRequestResponse, opts ...grpc.CallOption) (*BeforeStartRequestResponse, error) {
	out := new(BeforeStartRequestResponse)
	err := c.cc.Invoke(ctx, "/nodeum.protobuf.DispatcherPlugin/BeforeStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherPluginServer is the server API for DispatcherPlugin service.
// All implementations must embed UnimplementedDispatcherPluginServer
// for forward compatibility
type DispatcherPluginServer interface {
	BeforeStart(context.Context, *BeforeStartRequestResponse) (*BeforeStartRequestResponse, error)
	mustEmbedUnimplementedDispatcherPluginServer()
}

// UnimplementedDispatcherPluginServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherPluginServer struct {
}

func (UnimplementedDispatcherPluginServer) BeforeStart(context.Context, *BeforeStartRequestResponse) (*BeforeStartRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeStart not implemented")
}
func (UnimplementedDispatcherPluginServer) mustEmbedUnimplementedDispatcherPluginServer() {}

// UnsafeDispatcherPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherPluginServer will
// result in compilation errors.
type UnsafeDispatcherPluginServer interface {
	mustEmbedUnimplementedDispatcherPluginServer()
}

func RegisterDispatcherPluginServer(s grpc.ServiceRegistrar, srv DispatcherPluginServer) {
	s.RegisterService(&DispatcherPlugin_ServiceDesc, srv)
}

func _DispatcherPlugin_BeforeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeStartRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherPluginServer).BeforeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeum.protobuf.DispatcherPlugin/BeforeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherPluginServer).BeforeStart(ctx, req.(*BeforeStartRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherPlugin_ServiceDesc is the grpc.ServiceDesc for DispatcherPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeum.protobuf.DispatcherPlugin",
	HandlerType: (*DispatcherPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeforeStart",
			Handler:    _DispatcherPlugin_BeforeStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/dispatcher.plugin.proto",
}
